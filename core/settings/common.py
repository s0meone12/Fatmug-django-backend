"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 4.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os
from datetime import timedelta
from dotenv import load_dotenv
import sentry_sdk

sentry_sdk.init(
    dsn="https://3c231b023f78bb502650601500cc578a@sentry.fatmug.co.in/3",
    # Set traces_sample_rate to 1.0 to capture 100%
    # of transactions for performance monitoring.
    traces_sample_rate=1.0,
)

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
STATIC_DIR = os.path.join(BASE_DIR, "static")
MEDIA_DIR = os.path.join(BASE_DIR, "static/media")
TEMP_DIR = os.path.join(BASE_DIR, "static/media/temp")

load_dotenv(os.path.join(BASE_DIR, ".env"))
# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
if int(os.environ.get("DEBUG")) == 1:
    DEBUG = True
else:
    DEBUG = False

ALLOWED_HOSTS = os.environ.get("ALLOWED_HOSTS", "").split(",")
# ALLOWED_HOSTS = ['*']

# Django secret key
VIEWS_SECRET_KEY = os.environ.get("VIEWS_SECRET_KEY")
# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "core.apps.CoreConfig",
    "rest_framework",
    "rest_framework.authtoken",
    "django_cleanup.apps.CleanupConfig",
    "django_celery_beat",
    "django_celery_results",
    "dbbackup",
]


REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework.authentication.TokenAuthentication",
    ),
}

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "core.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "core.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": os.environ.get("POSTGRES_DB"),
        "USER": os.environ.get("POSTGRES_DB_USER"),
        "PASSWORD": os.environ.get("POSTGRES_DB_PASSWORD"),
        "HOST": os.environ.get("POSTGRES_DB_HOST") if os.path.exists('/.dockerenv') else 'localhost',
        "PORT": os.environ.get("POSTGRES_DB_PORT"),
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "Asia/Kolkata"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_ROOT = STATIC_DIR
STATIC_URL = "/static/"
STATICFILES_DIR = [
    STATIC_DIR,
]

# MEDIA
MEDIA_ROOT = MEDIA_DIR
MEDIA_URL = "/media/"

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


# Redis Config
REDIS_HOST = os.environ.get("REDIS_HOST")
REDIS_PORT = os.environ.get("REDIS_PORT")
REDIS_PASSWORD = os.environ.get("REDIS_PASSWORD")
CELERY_BROKER_URL = "redis://:{redis_password}@{redis_host}:{redis_port}".format(
    redis_password=REDIS_PASSWORD, redis_host=REDIS_HOST, redis_port=REDIS_PORT
)
CELERY_ACCEPT_CONTENT = ["application/json"]
CELERY_RESULT_SERIALIZER = "json"
CELERY_RESULT_BACKEND = "django-db"
CELERY_RESULT_EXTENDED = True
CELERY_RESULT_EXPIRES = timedelta(days=7)
CELERY_TASK_SERIALIZER = "json"
CELERY_TIMEZONE = "Asia/Kolkata"

# Celery Settings
CELERY_IMPORTS = ["core.tasks"]
CELERY_BROKER_CONNECTION_RETRY_ON_STARTUP = True

# API GATEWAY SETTINGS
API_GATEWAY_AMZ_ADS_URL_PREFIX = "/amz_ads_api"
API_GATEWAY_AMZ_SP_URL_PREFIX = "/amz_sp_api"
API_GATEWAY_HOST = os.environ.get("API_GATEWAY_HOST")
API_GATEWAY_USERNAME = os.environ.get("API_GATEWAY_USERNAME")
API_GATEWAY_PASSWORD = os.environ.get("API_GATEWAY_PASSWORD")

# Odoo Config
ODOO_API = os.environ.get("ODOO_API")

# Google Config
GOOGLE_CLIENT_EMAIL = os.environ.get("GOOGLE_CLIENT_EMAIL")
# GOOGLE_PRIVATE_KEY = os.environ.get('GOOGLE_PRIVATE_KEY').replace('\\n', '\n')
GOOGLE_TOKEN_URI = os.environ.get("GOOGLE_TOKEN_URI")

# AMZ ADS Configs
AMZ_ADS_INPUT_RPT_FOLDER_ID = os.environ.get("AMZ_ADS_INPUT_RPT_FOLDER_ID")
AMZ_ADS_BULK_UPLOAD_FOLDER_ID = os.environ.get("AMZ_ADS_BULK_UPLOAD_FOLDER_ID")
AMZ_ADS_SHARED_DRIVE_ID = os.environ.get("AMZ_ADS_SHARED_DRIVE_ID")
AMZ_API_GATEWAY_GD_FOLDER_ID = os.environ.get("AMZ_API_GATEWAY_GD_FOLDER_ID")


# Odoo Configs
ODOO_URL = os.environ.get("ODOO_URL")
ODOO_DB = os.environ.get("ODOO_DB")
ODOO_USERNAME = os.environ.get("ODOO_USERNAME")
ODOO_API_KEY = os.environ.get("ODOO_API_KEY")


# AMZ ADS Configs
AMZ_ADS_REFRESH_TOKEN = os.environ.get("AMZ_ADS_REFRESH_TOKEN")
AMZ_ADS_CLIENT_ID = os.environ.get("AMZ_ADS_CLIENT_ID")
AMZ_ADS_CLIENT_SECRET = os.environ.get("AMZ_ADS_CLIENT_SECRET")
AMZ_ADS_PROFILE_ID = os.environ.get("AMZ_ADS_PROFILE_ID")

# Email Configs
EMAIL_BACKEND = os.environ.get("EMAIL_BACKEND")
EMAIL_HOST = os.environ.get("EMAIL_HOST")
EMAIL_HOST_USER = os.environ.get("EMAIL_HOST_USER")
EMAIL_HOST_PASSWORD = os.environ.get("EMAIL_HOST_PASSWORD")
EMAIL_PORT = os.environ.get("EMAIL_PORT")
EMAIL_USE_TLS = int(os.environ.get("EMAIL_USE_TLS")
                    ) == 1 if os.environ.get("EMAIL_USE_TLS") else False
EMAIL_USE_SSL = int(os.environ.get("EMAIL_USE_SSL")
                    ) == 1 if os.environ.get("EMAIL_USE_SSL") else False


# SP API Configs
SP_API_LWA_APP_ID = os.environ.get("SP_API_LWA_APP_ID")
SP_API_LWA_CLIENT_SECRET = os.environ.get("SP_API_LWA_CLIENT_SECRET")
SP_API_ACCESS_KEY = os.environ.get("SP_API_ACCESS_KEY")
SP_API_SECRET_KEY = os.environ.get("SP_API_SECRET_KEY")
SP_API_ROLE_ARN = os.environ.get("SP_API_ROLE_ARN")
SP_API_REFRESH_TOKEN = os.environ.get("SP_API_REFRESH_TOKEN")

# py7zr Encryption
ZIP_ENCRYPTION_KEY = os.environ.get("ZIP_ENCRYPTION_KEY")


# DB Backup Configs
DBBACKUP_STORAGE = "django.core.files.storage.FileSystemStorage"
DBBACKUP_STORAGE_OPTIONS = {"location": str(BASE_DIR) + "/db_backups"}
MIGRATIONS_DIR = os.path.join(BASE_DIR, "migrations")

# Celery Beat Configs
CELERY_BEAT_SCHEDULER = "django_celery_beat.schedulers:DatabaseScheduler"


# SERVER Configs
SERVER_IP = os.environ.get("SERVER_IP")
SERVER_USERNAME = os.environ.get("SERVER_USERNAME")
SERVER_DB_BACKUP_DIR = os.environ.get("SERVER_DB_BACKUP_DIR")
SERVER_MIGRATION_FOLDER = os.environ.get("SERVER_MIGRATION_FOLDER")
